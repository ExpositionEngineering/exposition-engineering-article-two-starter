setup: |
  echo "üêä Attempt to install exposition engineering tools"
  echo "üêä Using pipx to perform program installation"
  echo "üêä Will not re-install if already installed"
  pipx install pymarkdownlnt
---

# Checks on Files {{{

# perform checks on a file
- writing/article.md:
    - description: Ensure that the article.md file exists in the writing/ directory
      check: ConfirmFileExists
    - description: Complete all TODOs, remove the TODO markers, and rewrite comments for the reflection
      check: MatchFileFragment
      options:
        fragment: TODO
        count: 0
        exact: true
    - description: Delete the 'Add Your Name Here' prompt in the reflection file
      check: MatchFileFragment
      options:
        fragment: "Add Your Name Here"
        count: 0
        exact: true
    - description: Retype the every word in the Honor Code pledge in reflection.md
      check: MatchFileFragment
      options:
        fragment: "I adhered to the Allegheny College Honor Code while completing this project."
        count: 1
        exact: true
    - description: Confirm that the markdown file containing the article has the correct number of headers
      check: CountMarkdownTags
      options:
        tag: heading
        count: 15 
        exact: false
    - description: Confirm that the markdown file containing the show outline has a minimum number of paragraphs
      check: CountMarkdownTags
      options:
        tag: paragraph
        count: 5
        exact: false
    - description: Confirm that the markdown file containing the show outline has a minimum number of lists
      check: CountMarkdownTags
      options:
        tag: list 
        count: 5
        exact: false
    - description: Confirm that the markdown file containing the article has the introduction section
      check: MatchFileFragment
      options:
        fragment: "## Introduction"
        count: 1
        exact: true
    - description: Confirm that the markdown file containing the article has the conclusion section
      check: MatchFileFragment
      options:
        fragment: "## Conclusion"
        count: 1
        exact: true
    - description: Confirm that the markdown file containing the article has AI writing assistant author(s)
      check: MatchFileFragment
      options:
        fragment: "AI Writing Assistant Author(s)"
        count: 1
        exact: true
    - description: Confirm that the markdown file containing the article has the student author
      check: MatchFileFragment
      options:
        fragment: "Student Author"
        count: 1
        exact: true
    - description: Confirm that the markdown file containing the article has the AI writing assistant statement section
      check: MatchFileFragment
      options:
        fragment: "## AI Writing Assistant Statement"
        count: 1
        exact: true

# }}}

# Check Output from Linters {{{

# run a check
- description: Confirm that the show outline files passes the linting checks run by pymarkdownlnt
  command: "pymarkdown --config .pymarkdown.cfg scan writing/article.md"

# }}}

# Commits {{{

# count number of commits in the GitHub repository
- description: Have at least a specific minimum of commits in repository
  check: CountCommits
  options:
    count: 10

# }}}
